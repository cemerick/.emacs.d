#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Szmulewicz
#+EMAIL: daniel.szmulewicz@gmail.com

* Saving Customizations
We want to save our customizations in a dedicated file. We will check
the existence of such a file so as not to cause errors on a vanilla
emacs installation. Please create it yourself if you don't want your
customizations to be saved in the init file. (default behavior)
#+BEGIN_SRC emacs-lisp
(let 
     ((customization-file "~/.emacs.d/emacs-custom.el"))
  (when (file-exists-p customization-file)
    (setq custom-file customization-file)
    (load custom-file)))
#+END_SRC
* UTF-8
We want to have default utf-8 everything.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

* Tabs
Two-width tab stops, like I'm used to
#+BEGIN_SRC emacs-lisp
(setq tab-width 2)
(setq tab-stop-list (number-sequence 2 200 2))
(setq indent-tabs-mode nil)
#+END_SRC

* Color theme
#+BEGIN_SRC emacs-lisp
(load-theme 'adwaita t)
#+END_SRC

* Graphic display
Disable menu-bar in terminal, enable in graphic display
#+BEGIN_SRC emacs-lisp

 (if (display-graphic-p)
      (progn
        (set-frame-size (selected-frame) 90 34)
        (menu-bar-mode t))
     (menu-bar-mode 0))

#+END_SRC

* Winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

* Windmove
#+BEGIN_SRC emacs-lisp
 (when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))
#+END_SRC
* Recent file list
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+END_SRC

* Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

Get rid of `find-file-read-only' and replace it with something more useful.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
#+END_SRC

** recentf
Make recentf use ido
#+BEGIN_SRC emacs-lisp

(defun ido-recentf-open () 
  "Use `ido-completing-read' to \\[find-file] a recent file" 
  (interactive) 
  (if (find-file (ido-completing-read "Find recent file: " recentf-list)) 
      (message "Opening file...") 
    (message "Aborting")))
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

* Key remappings
Fix the bug that shift-up doesn't send the right escape sequence in terminal

#+BEGIN_SRC emacs-lisp
(if (equal "xterm-256color" (tty-type)) (define-key input-decode-map "\e[1;2A" [S-up]))
#+END_SRC

To make windmove work in tmux
#+BEGIN_SRC emacs-lisp

(if (equal "screen-256color" (tty-type)) 
    (progn
    (define-key input-decode-map "\e[1;2D" [S-left])  
    (define-key input-decode-map (kbd "M-[ 1 ; 2 C") [S-right])  
    (define-key input-decode-map (kbd "M-[ 1 ; 2 B")[S-down])  
    (define-key input-decode-map "\e[1;2A" [S-up])  
    (define-key input-decode-map "\e[1;6A" [S-C-up])
    (define-key input-decode-map "\e[1;6B" [S-C-down])))

#+END_SRC

* El-get

** Installation routine

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless 
    (require 'el-get nil t) 
  (url-retrieve "https://raw.github.com/dimitri/el-get/master/el-get-install.el" 
  (lambda (s) 
    (let (el-get-master-branch)
      (goto-char (point-max)) 
        (eval-print-last-sexp)))))
#+END_SRC

** Recipe setup
Canonical list of packages
#+BEGIN_SRC emacs-lisp

(setq my-packages (append '(el-get smex yasnippet magit helm
                            zenburn-theme solarized-theme 
                            ruby-mode inf-ruby rspec-mode rbenv
                            emacs-w3m yaml-mode windcycle
	                    coffee-mode markdown-mode scss-mode mustache-mode
	                    clojure-mode midje-mode nrepl htmlize paredit kibit-mode
	                    epresent org-html5presentation org-impress-js org-s5
		            o-blog deft palimpsest-mode) 
			  (mapcar 'el-get-source-name el-get-sources)))
(el-get-cleanup my-packages)
(el-get 'sync my-packages)
#+END_SRC

** User setup
#+BEGIN_SRC emacs-lisp
(setq el-get-sources '((:name magit 
                        :after (global-set-key (kbd "C-x C-o") 'magit-status))
                       (:name ruby-mode
                        :after (when (string= system-name "ma.sdf.org") (setq enh-ruby-program "ruby193")))
                       (:name elisp-format 
	                :features elisp-format)))
#+END_SRC
* Text-files hooks
Turn visual mode for text files
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

* Deft
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/Dropbox/notes")
(setq deft-extension "org")
(setq deft-text-mode 'org-mode)
#+END_SRC
* Org-mode modules

** Org-babel

org-babel setup
#+BEGIN_SRC emacs-lisp

(when (locate-file "ob" load-path load-suffixes)
					   (require 'ob)
					   (require 'ob-tangle)
					   (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

					   (org-babel-do-load-languages
					    'org-babel-load-languages
					    '((emacs-lisp . t)
					      (clojure . t)
					      (js . t)
					      (ruby . t)))


					   (defun org-babel-execute:clojure (body params)
					     "Evaluate a block of Clojure code with Babel."
					     (let* ((result (nrepl-send-string-sync body (nrepl-current-ns)))
						    (value (plist-get result :value))
						    (out (plist-get result :stdout))
						    (out (when out
							   (if (string= "\n" (substring out -1))
							       (substring out 0 -1)
							     out)))
						    (stdout (when out
							      (mapconcat (lambda (line)
									   (concat ";; " line))
									 (split-string out "\n")
									 "\n"))))
					       (concat stdout
						       (when (and stdout (not (string= "\n" (substring stdout -1))))
							 "\n")
						       ";;=> " value)))

					   (provide 'ob-clojure)

					   (setq org-src-fontify-natively t)
					   (setq org-confirm-babel-evaluate nil))

#+END_SRC

** Org-velocity
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c v") 'org-velocity-read)
#+END_SRC
* Ctags
Find root (replace eproject-root): cd "$(git rev-parse --show-toplevel)"

#+BEGIN_SRC emacs-lisp
(defun build-ctags ()
  (interactive)
  (message "building project tags")
  (let ((root (eproject-root)))
    (shell-command (concat "ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git --exclude=public -f " root "TAGS " root)))
  (visit-project-tags)
  (message "tags built successfully"))

(defun visit-project-tags ()
  (interactive)
  (let ((tags-file (concat (eproject-root) "TAGS")))
    (visit-tags-table tags-file)
    (message (concat "Loaded " tags-file))))
#+END_SRC
* Repos
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("tromey" . "http://tromey.com/elpa/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC
* Paredit
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
#+END_SRC
