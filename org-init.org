#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Szmulewicz
#+EMAIL: daniel.szmulewicz@gmail.com

* Customizations
We want to save our customizations in a dedicated file. We will check
the existence of such a file so as not to cause errors on a vanilla
emacs installation. Please create it yourself if you don't want your
customizations to be saved in the init file. (default behavior)
#+BEGIN_SRC emacs-lisp
  (let 
      ((customization-file "~/.emacs.d/emacs-custom.el"))
    (when (file-exists-p customization-file)
      (setq custom-file customization-file)
      (load custom-file)))
#+END_SRC
* Backup and autosave
Keep Backup and Auto-save Files Out of the Way
http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/

#+BEGIN_SRC emacs-lisp
;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* UTF-8
We want to have default utf-8 everything.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

* Tabs
Two-width tab stops, like I'm used to
#+BEGIN_SRC emacs-lisp
(setq tab-width 2)
(setq tab-stop-list (number-sequence 2 200 2))
(setq indent-tabs-mode nil)
#+END_SRC

* Winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

* Windmove
#+BEGIN_SRC emacs-lisp
 (when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))
#+END_SRC

Make windmove work in org-mode:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
* Recent file list
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+END_SRC

* Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** recentf
Make recentf use ido
#+BEGIN_SRC emacs-lisp

(defun ido-recentf-open () 
  "Use `ido-completing-read' to \\[find-file] a recent file" 
  (interactive) 
  (if (find-file (ido-completing-read "Find recent file: " recentf-list)) 
      (message "Opening file...") 
    (message "Aborting")))
#+END_SRC

* Undo
 #+BEGIN_SRC emacs-lisp
 (global-undo-tree-mode)
 #+END_SRC
* Uniquify
 #+BEGIN_SRC emacs-lisp
   (require 'uniquify)
   (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
 #+END_SRC
* Spelling
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
(setq ispell-list-command "list")
#+END_SRC
* Key remappings
Fix the bug that shift-up doesn't send the right escape sequence in terminal

#+BEGIN_SRC emacs-lisp
(if (equal "xterm-256color" (tty-type)) (define-key input-decode-map "\e[1;2A" [S-up]))
#+END_SRC

To make windmove work in tmux
#+BEGIN_SRC emacs-lisp

(if (equal "screen-256color" (tty-type)) 
    (progn
    (define-key input-decode-map "\e[1;2D" [S-left])  
    (define-key input-decode-map (kbd "M-[ 1 ; 2 C") [S-right])  
    (define-key input-decode-map (kbd "M-[ 1 ; 2 B")[S-down])  
    (define-key input-decode-map "\e[1;2A" [S-up])  
    (define-key input-decode-map "\e[1;6A" [S-C-up])
    (define-key input-decode-map "\e[1;6B" [S-C-down])))

#+END_SRC
Not sure it is needed.
#+BEGIN_SRC emacs-lisp
  (if (equal "daniels-imac.local" (system-name))
      (add-hook 'comint-mode-hook
                (lambda ()               
                  (define-key comint-mode-map (kbd "M-n") 'comint-next-input))))
#+END_SRC

* Misc.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Rakefile\\'" . ruby-mode))
  (when (string= system-name "ma.sdf.org") (setq enh-ruby-program "ruby193"))
#+END_SRC
                         
#+BEGIN_SRC emacs-lisp
(add-hook 'css-mode-hook 'rainbow-mode)
#+END_SRC

* Color theme
#+BEGIN_SRC emacs-lisp
(load-theme 'zenburn t)
#+END_SRC
  
* Splash screen
 #+BEGIN_SRC emacs-lisp
 (setq inhibit-splash-screen t)
 #+END_SRC
* Display customizations
** Menu bar

We want a menu bar on graphical display systems, and none in the terminal.

#+BEGIN_SRC emacs-lisp
  (defun set-frame-menu-bar-lines (&optional frame)
    (let ((want-menu (display-graphic-p frame)))
      (set-frame-parameter frame 'menu-bar-lines (if want-menu 1 0))))
  (add-hook 'after-make-frame-functions 'set-frame-menu-bar-lines)
  (add-hook 'after-init-hook 'set-frame-menu-bar-lines)
  
#+END_SRC

** Frame positioning 
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((height . 44) (width . 120) (top . 20) (left . 200)))  
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(font . "Menlo-14")))
#+END_SRC
** Clipboard and kill ring

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (progn
    (turn-on-pbcopy)))  
#+END_SRC

[[http://stackoverflow.com/questions/3376863/unable-to-type-braces-and-square-braces-in-emacs][** Braces and square braces in emacs]]

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-right-option-modifier nil
          mac-option-key-is-meta t
          x-select-enable-clipboard t))
#+END_SRC
** Nyan-mode
#+BEGIN_SRC emacs-lisp
  (defun toggle-nyan-mode (&optional frame)
    (if (display-graphic-p frame)
        (nyan-mode t)
      (nyan-mode -1)))
  (add-hook 'after-init-hook 'toggle-nyan-mode)
  (add-hook 'after-make-frame-functions 'toggle-nyan-mode)
#+END_SRC
** Unused 
#+BEGIN_SRC emacs-lisp

  (defun reset-ui (&optional frame)
    (if frame
        (select-frame frame))
    (interactive)
    (smex-initialize)
    (load-theme 'solarized-dark t)
    (delete-other-windows)
    (set-cursor-color "deeppink")
    (set-face-background 'modeline-inactive "gray10")
    (if (window-system)
        (cond
         ((= 1050 (display-pixel-height)); 22" display
          (set-frame-size (selected-frame) 163 71)
          (set-frame-position (selected-frame) 0 -1050))
         ((= 1200 (display-pixel-height)); 24" display
          (set-frame-size (selected-frame) 163 76)
          (set-frame-position (selected-frame) 0 -1200))
         (t ; laptop runs 1440x900
          (set-frame-size (selected-frame) 163 53)
          (set-frame-position (selected-frame) 0 0))))
    (split-window-horizontally))
  
  ;;(add-hook 'after-make-frame-functions 'reset-ui)

#+END_SRC
* Text-files hooks
Turn visual mode for text files
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

* Deft
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/Dropbox/notes")
(setq deft-extension "org")
(setq deft-text-mode 'org-mode)
#+END_SRC
* Org-mode
** Location of default notes files

#+begin_src emacs-lisp
  (let ((destination (if (file-exists-p "~/Dropbox")
                         "~/Dropbox/notes.org"
                       "~/notes.org")))
    (setq org-default-notes-file destination))    
#+end_src

** Capture templates

#+BEGIN_SRC emacs-lisp
     
(require 'org-element)
        
(defun pn-get-headline ()
  (let* ((headlines (org-map-entries '(org-element-property :title (org-element-at-point)) t 'file)) 
         (headline (car headlines)) 
         (listoftags (org-map-entries '(org-element-property :tags (org-element-at-point)) t 'file))
         (tags (car listoftags)))
    (org-capture-put :title headline)
    (org-capture-put :tags tags)
    headline))

(defun pn-filename_from_title ()
  (replace-regexp-in-string " " "-" (pn-get-headline)))

(defun matching-post (title)
  (directory-files (pn-get-property :publishing-directory) nil (concat "[0-9]\\{4\\}-[0-9]+-[0-9]+-" title ".html")))

(defun pn-postp (title)
  (matching-post title))

(defun pn-date-from-file (title)
  (substring (car (matching-post title)) 0 10))

(defun get-date (title)
  (if (pn-postp title)
      (pn-date-from-file title)
    (format-time-string "%Y-%m-%d")))

(defun pn-capture-blog-path ()
  (let ((name (pn-filename_from_title)))
    (expand-file-name (format "%s-%s.org"
                              (get-date name)
                              name) "~/Dropbox/notes/blog")))

(setq org-capture-templates  
      
      '(         
        ("b" 
         "Org to Blog entry" 
         plain 
         (file (pn-capture-blog-path)) 
         "#+BEGIN_HTML\n---\ntitle: %(org-capture-get :title)\nlayout: post\ntags: %(mapconcat 'identity (org-capture-get :tags) \" \")\ncategories: %(mapconcat 'identity (org-capture-get :tags) \" \")\n---\n#+END_HTML\n\n%F"
         :immediate-finish t
         :kill-buffer t
         )
          
        ("t" 
         "Todo" 
         entry 
         (file+headline "" "Task")
         "* TODO %?\n  %i\n  %a")
        
         ("r"
         "Recipes"
          )
        
         ("rc"
          "Cocktails"
          entry
          (file+headline "~/Dropbox/notes/recipes.org" "Cocktail recipe")
          "* %^{Cocktail (title)}\n %? \n%u"
          )
        
         ("i"
         "Idea")
        
        ("ia"
         "app idea"
         entry
         (file+headline "~/Dropbox/notes/ideas.org" "App ideas")
         "* %^{App idea (title)}\n %? \n%u"
         )
        
        ("ib"
         "blog idea"
         entry
         (file+headline "~/Dropbox/notes/ideas.org" "Blog ideas")
         "* %^{Blog idea (title)}\n %? \n%u"
         )

        ("it"
         "T-shirt idea"
         entry
         (file+headline "~/Dropbox/notes/ideas.org" "T-shirt slogans")
         "* %^{T-shirt slogan (title)}\n %? \n%u"
         )
        
        ("j" 
         "Journal" 
         entry (file+datetree "")             
         "* %?\nEntered on %U\n  %i\n  %a")))

(setq org-capture-templates-contexts
      '(("b" ((in-mode . "org-mode")))))

#+END_SRC

** Project configuration

Publishing is configured almost entirely through setting the value of one variable, called `org-publish-project-alist

#+BEGIN_SRC emacs-lisp

(setq org-publish-project-alist
      '(
        ("org-perfumed-nightmare"
         :base-directory "~/Dropbox/notes/blog"
         :publishing-directory "~/Documents/danielsz.github.io/_posts"
         :publishing-function org-html-publish-to-html
         :preparation-function (lambda () (mapcar 'pn-expand-blog-file (pn-select-blog-files)))
         :completion-function pn-delete-blog-files
         :table-of-contents nil
         :html-extension "html"
         :body-only t 
         :exclude "\\^\\([0-9]\\{4\\}-[0-9]+-[0-9]+\\)"
         ))
      )

#+END_SRC

These are my helper functions for the above project. One-click exporting to jekyll.

#+begin_src emacs-lisp
    
(defun pn-get-property (prop)
  (plist-get (cdr (assoc "org-perfumed-nightmare" org-publish-project-alist)) prop))

(defun pn-select-blog-files ()
  (directory-files (pn-get-property :base-directory) t "\\([0-9]\\{4\\}-[0-9]+-[0-9]+\\)"))

(defun pn-delete-blog-files ()
  (mapcar (lambda (file)
            (kill-buffer (find-buffer-visiting file))
            (delete-file file)) (pn-select-blog-files))
  ) 
(defun chomp (str)
  "Chomp leading and trailing whitespace from STR."
  (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                       str)
    (setq str (replace-match "" t t str)))
  str)
    
(defun pn-delete-line ()
  (delete-region (point) (progn (forward-line -1) (point))))

(defun pn-expand-blog-file (file)
  (with-current-buffer (find-file-noselect file)
    (end-of-buffer)
    (beginning-of-line)
    (let ((root-file (chomp (thing-at-point 'line))))
      (pn-delete-line)
      (insert-file-contents root-file)
      (delete-region (point) (line-end-position)))
    (save-buffer)))

#+end_src

Interactive function to enable the 1-click custom export command in Emacs:

#+BEGIN_SRC emacs-lisp

  (defun org-export-blog ()
    "1-click blog publishing"
    (interactive)
    (org-capture nil "b")
    (org-publish "org-perfumed-nightmare"))
  
#+END_SRC

** Org-babel

org-babel setup
#+BEGIN_SRC emacs-lisp
        
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (clojure . t)
     (js . t)
     (ruby . t)))
  
  (setq org-babel-clojure-backend 'cider)
  
  ;; Let's have pretty source code blocks
  (setq org-edit-src-content-indentation 0
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-confirm-babel-evaluate nil)
  
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(org-defkey org-mode-map "\C-x\C-e" 'cider-eval-last-sexp)
(org-defkey org-mode-map "\C-c\C-d" 'cider-doc)
#+END_SRC
* Ctags
Find root (replace eproject-root): cd "$(git rev-parse --show-toplevel)"

#+BEGIN_SRC emacs-lisp
(defun build-ctags ()
  (interactive)
  (message "building project tags")
  (let ((root (eproject-root)))
    (shell-command (concat "ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git --exclude=public -f " root "TAGS " root)))
  (visit-project-tags)
  (message "tags built successfully"))

(defun visit-project-tags ()
  (interactive)
  (let ((tags-file (concat (eproject-root) "TAGS")))
    (visit-tags-table tags-file)
    (message (concat "Loaded " tags-file))))
#+END_SRC
* Paredit
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
#+END_SRC
* Pretty Lambda
#+BEGIN_SRC emacs-lisp
(pretty-lambda-for-modes)
#+END_SRC
* Slime
If there is a slime helper in quicklisp directory, assume a clozure installation
#+BEGIN_SRC emacs-lisp
  (let 
       ((slime-helper (expand-file-name "~/quicklisp/slime-helper.el")))
    (when (file-exists-p slime-helper)
      (load slime-helper)
      (setq inferior-lisp-program "ccl64")))
#+END_SRC

Open the hyperspec with w3m. `C-c C-d h`

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function '(("hyperspec" . w3m-browse-url)
                                      ("." . browse-url-default-macosx-browser)))
#+END_SRC
* Clojure
** Cider
#+BEGIN_SRC emacs-lisp

(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(add-hook 'cider-repl-mode-hook 'subword-mode)
(add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)

(setq nrepl-hide-special-buffers t
      cider-repl-pop-to-buffer-on-connect nil
      cider-popup-stacktraces nil
      cider-repl-popup-stacktraces t
      nrepl-buffer-name-show-port t
      cider-auto-select-error-buffer t)


;(define-key nrepl-repl-mode-map (kbd "C-c C-i") 'nrepl-inspect)
;(add-to-list 'same-window-buffer-names "*nrepl*")
#+END_SRC

I was experimenting with integrated tools.namespace reloading in elisp as well, and I found a slightly nicer way to send commands to nrepl:
#+BEGIN_SRC emacs-lisp
(defun cider-reset ()
    (interactive)
    (cider-interactive-eval "(user/reset)"))

(defun cider-refresh ()
    (interactive)
    (cider-interactive-eval "(clojure.tools.namespace.repl/refresh)"))
#+END_SRC

** rainbow delimiters
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
** pretty lambda and co
#+BEGIN_SRC emacs-lisp
(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode `(("(\\(fn\\)[\[[:space:]]"
                     (0 (progn (compose-region (match-beginning 1)
                                               (match-end 1) "λ")
                               nil))))))

(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode `(("\\(#\\)("
                     (0 (progn (compose-region (match-beginning 1)
                                               (match-end 1) "ƒ")
                               nil))))))

(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode `(("\\(#\\){"
                     (0 (progn (compose-region (match-beginning 1)
                                               (match-end 1) "∈")
                               nil))))))
#+END_SRC
** auto-complete

In Clojure buffers.

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
(define-key ac-completing-map "\M-/" 'ac-stop) ; use M-/ to stop completion
#+END_SRC

In Cider.

#+BEGIN_SRC emacs-lisp
(require 'ac-nrepl)
(add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
(add-hook 'cider-mode-hook 'ac-nrepl-setup)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'cider-repl-mode))
(eval-after-load "cider"
  '(define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc))
#+END_SRC
* Ruby
 #+BEGIN_SRC emacs-lisp
(autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
(add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
(add-hook 'after-init-hook 'inf-ruby-switch-setup)
 #+END_SRC
* w3m
#+BEGIN_SRC emacs-lisp
(setq w3m-coding-system 'utf-8
          w3m-file-coding-system 'utf-8
          w3m-file-name-coding-system 'utf-8
          w3m-input-coding-system 'utf-8
          w3m-output-coding-system 'utf-8
          w3m-terminal-coding-system 'utf-8)
#+END_SRC
* EMMS
#+BEGIN_SRC emacs-lisp
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (setq emms-stream-default-action "play")
#+END_SRC
* ERC
#+BEGIN_SRC emacs-lisp
  (setq erc-autojoin-channels-alist
        '(("freenode.net" "#emacs" "#clojure")))
  (defun myerc ()
    (interactive)
    (erc :server "irc.freenode.net" :port 6667 :nick "danielszmulewicz"))
#+END_SRC
* mu4e
#+BEGIN_SRC emacs-lisp
    (when (require 'mu4e nil t)
      (setq 
       mu4e-maildir (expand-file-name "~/mail")
       mu4e-mu-binary "/usr/local/bin/mu"
       ;; below are the defaults; if they do not exist yet, mu4e offers to
       ;; create them. they can also functions; see their docstrings.
       ;; (setq mu4e-sent-folder   "/sent")
       ;; (setq mu4e-drafts-folder "/drafts")
       ;; (setq mu4e-trash-folder  "/trash")
       ;;mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
       mu4e-get-mail-command "true"
       mu4e-update-interval 300)             ;; update every 5 minutes
      )
        
    ;; something about ourselves
    (setq
     user-mail-address "daniel.szmulewicz@gmail.com"
     user-full-name  "Daniel Szmulewicz"
     message-signature
     (concat
      "http://danielsz.github.io\n"))
    
    ;;for emacs-24 you can use: 
    (setq send-mail-function 'smtpmail-send-it
          smtpmail-stream-type 'starttls
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          ;; To allow for queuing, you need to tell smtpmail where you want to
          ;; store the queued messages. For example:
          smtpmail-queue-mail nil  ;; start in non-queuing mode
          smtpmail-queue-dir "~/mail/queue/cur"
          )
    
    ;; attempt to show images when viewing messages
    (setq
     mu4e-view-show-images t
     mu4e-view-image-max-width 800)
#+END_SRC

* ElDOC
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
* Terminal hotkey
#+BEGIN_SRC emacs-lisp
  
  (defun toggle-terminal ()
    (interactive)
    (if (string= "eshell-mode" (eval 'major-mode))
        (winner-undo)
      (progn (delete-other-windows) (eshell))))
  
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC
* web-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))


(defun web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
)
(add-hook 'web-mode-hook  'web-mode-hook)


#+END_SRC

#+RESULTS:
| web-mode-hook |

* elisp
** elisp-slime-nav
#+BEGIN_SRC emacs-lisp
(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
  (add-hook hook 'turn-on-elisp-slime-nav-mode))
#+END_SRC
** elisp-format
elisp-format is a handy mode enabling source code formating of elisp code.
It's unavailable on the repos, so here is how to install it manually (commented out for now) 
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path (expand-file-name "~/elisp"))
;;(require 'elisp-format)
#+END_SRC

** package development
#+BEGIN_SRC emacs-lisp
    ;(when (string= system-name "Daniels-MacBook-Air-2.local")
      ;(add-to-list 'load-path "~/Documents/elisp/impatient-mode/imp.el")
      ;(require 'impatient-mode))
#+END_SRC
* Global keys
#+BEGIN_SRC emacs-lisp
;;ace-jump-mode
(eval-after-load "org"
        '(define-key org-mode-map "\C-c " 'nil)) ; unmap key, was org-table-blank-field
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
;;org-capture
(global-set-key [f6] 'org-capture)
;;deft
(global-set-key [f8] 'deft)
;;org-velocity
(global-set-key (kbd "C-c v") 'helm-projectile)
;;magit
(global-set-key (kbd "C-x C-o") 'magit-status)
;;;Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface to your recently and most frequently used commands.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
;;Get rid of `find-file-read-only' and replace it with something more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
;;helm mini
(global-set-key (kbd "C-c h") 'helm-mini)
;;magit-status
(global-set-key (kbd "C-x g") 'magit-status)
;; slime-selector
(global-set-key [f5] 'slime-selector)
;; terminal visor
(global-set-key (kbd "C-c t") 'toggle-terminal)
#+END_SRC



