#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Szmulewicz
#+EMAIL: daniel.szmulewicz@gmail.com

* Saving Customizations
We want to save our customizations in a dedicated file. We will check
the existence of such a file so as not to cause errors on a vanilla
emacs installation. Please create it yourself if you don't want your
customizations to be saved in the init file. (default behavior)
#+BEGIN_SRC emacs-lisp
  (let 
      ((customization-file "~/.emacs.d/emacs-custom.el"))
    (when (file-exists-p customization-file)
      (setq custom-file customization-file)
      (load custom-file)))
#+END_SRC
* Backup and autosave
Keep Backup and Auto-save Files Out of the Way
http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/

#+BEGIN_SRC emacs-lisp
;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* UTF-8
We want to have default utf-8 everything.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

* Tabs
Two-width tab stops, like I'm used to
#+BEGIN_SRC emacs-lisp
(setq tab-width 2)
(setq tab-stop-list (number-sequence 2 200 2))
(setq indent-tabs-mode nil)
#+END_SRC

* Color theme
#+BEGIN_SRC emacs-lisp
(load-theme 'adwaita t)
#+END_SRC

* Graphic display
Disable menu-bar in terminal, enable in graphic display
#+BEGIN_SRC emacs-lisp

 (if (display-graphic-p)
      (progn
        (set-frame-size (selected-frame) 90 34)
        (menu-bar-mode t))
     (menu-bar-mode 0))

#+END_SRC

* Winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

* Windmove
#+BEGIN_SRC emacs-lisp
 (when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))
#+END_SRC

Make windmove work in org-mode:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
* Recent file list
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+END_SRC

* Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** recentf
Make recentf use ido
#+BEGIN_SRC emacs-lisp

(defun ido-recentf-open () 
  "Use `ido-completing-read' to \\[find-file] a recent file" 
  (interactive) 
  (if (find-file (ido-completing-read "Find recent file: " recentf-list)) 
      (message "Opening file...") 
    (message "Aborting")))
#+END_SRC

* Key remappings
Fix the bug that shift-up doesn't send the right escape sequence in terminal

#+BEGIN_SRC emacs-lisp
(if (equal "xterm-256color" (tty-type)) (define-key input-decode-map "\e[1;2A" [S-up]))
#+END_SRC

To make windmove work in tmux
#+BEGIN_SRC emacs-lisp

(if (equal "screen-256color" (tty-type)) 
    (progn
    (define-key input-decode-map "\e[1;2D" [S-left])  
    (define-key input-decode-map (kbd "M-[ 1 ; 2 C") [S-right])  
    (define-key input-decode-map (kbd "M-[ 1 ; 2 B")[S-down])  
    (define-key input-decode-map "\e[1;2A" [S-up])  
    (define-key input-decode-map "\e[1;6A" [S-C-up])
    (define-key input-decode-map "\e[1;6B" [S-C-down])))

#+END_SRC
Not sure it is needed.
#+BEGIN_SRC emacs-lisp
  (if (equal "daniels-imac.local" (system-name))
      (add-hook 'comint-mode-hook
                (lambda ()               
                  (define-key comint-mode-map (kbd "M-n") 'comint-next-input))))
#+END_SRC

* El-get
** Installation routine

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless 
    (require 'el-get nil t) 
  (url-retrieve "https://raw.github.com/dimitri/el-get/master/el-get-install.el" 
  (lambda (s) 
    (let (el-get-master-branch)
      (goto-char (point-max)) 
        (eval-print-last-sexp)))))
#+END_SRC

** Recipe setup
Canonical list of packages
#+BEGIN_SRC emacs-lisp
    
    (setq my-packages (append '(el-get smex magit helm dash
                                zenburn-theme solarized-theme 
                                inf-ruby rspec-mode rbenv
                                emacs-w3m yaml-mode 
                                windcycle pbcopy ace-jump-mode
                                flymake flymake-ruby
                                coffee-mode markdown-mode scss-mode mustache-mode
                                clojure-mode midje-mode nrepl htmlize paredit kibit-mode
                                epresent org-html5presentation org-impress-js org-s5
                                o-blog deft palimpsest-mode org-jekyll) 
                              (mapcar 'el-get-source-name el-get-sources)))
    (el-get-cleanup my-packages)
    (el-get 'sync my-packages)
#+END_SRC

** User setup
#+BEGIN_SRC emacs-lisp
(setq el-get-sources '(
                       (:name ruby-mode
                        :after (when (string= system-name "ma.sdf.org") (setq enh-ruby-program "ruby193")))
                       (:name elisp-format 
	                :features elisp-format)))
#+END_SRC
* Text-files hooks
Turn visual mode for text files
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

* Deft
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/Dropbox/notes")
(setq deft-extension "org")
(setq deft-text-mode 'org-mode)
#+END_SRC
* Org-mode
** Location of default notes files

#+begin_src emacs-lisp
  (let ((destination (if (file-exists-p "~/Dropbox")
                         "~/Dropbox/notes.org"
                       "~/notes.org")))
    (setq org-default-notes-file destination))    
#+end_src

** Capture templates

#+BEGIN_SRC emacs-lisp
       
  (require 'org-element)
          
  (defun pn-get-headline ()
    (let* ((headlines (org-map-entries '(org-element-property :title (org-element-at-point)) t 'file)) 
           (headline (car headlines)) 
           (listoftags (org-map-entries '(org-element-property :tags (org-element-at-point)) t 'file))
           (tags (car listoftags)))
      (org-capture-put :title headline)
      (org-capture-put :tags tags)
      headline))
  
  (defun pn-filename_from_title ()
    (replace-regexp-in-string " " "-" (pn-get-headline)))
  
  (defun matching-post (title)
    (directory-files (pn-get-property :publishing-directory) nil (concat "[0-9]\\{4\\}-[0-9]+-[0-9]+-" title ".html")))
  
  (defun pn-postp (title)
    (matching-post title))
  
  (defun pn-date-from-file (title)
    (substring (car (matching-post title)) 0 10))
  
  (defun get-date (title)
    (if (pn-postp title)
        (pn-date-from-file title)
      (format-time-string "%Y-%m-%d")))
  
  (defun pn-capture-blog-path ()
    (let ((name (pn-filename_from_title)))
      (expand-file-name (format "%s-%s.org"
                                (get-date name)
                                name) "~/Dropbox/notes/blog")))
  
  (setq org-capture-templates  
        
        '(         
          ("b" 
           "Org to Blog entry" 
           plain 
           (file (pn-capture-blog-path)) 
           "#+BEGIN_HTML\n---\ntitle: %(org-capture-get :title)\nlayout: post\ntags: %(mapconcat 'identity (org-capture-get :tags) \" \")\n---\n#+END_HTML\n\n%F"
           :immediate-finish t
           :kill-buffer t
           )
            
          ("t" 
           "Todo" 
           entry 
           (file+headline "" "Task")
           "* TODO %?\n  %i\n  %a")
          
          ("i"
           "Idea")
          
          ("ia"
           "app idea"
           entry
           (file+headline "~/Dropbox/notes/ideas.org" "App ideas")
           "* %^{App idea (title)}\n %? \n%u"
           )
          
          ("ib"
           "blog idea"
           entry
           (file+headline "~/Dropbox/notes/ideas.org" "Blog ideas")
           "* %^{Blog idea (title)}\n %? \n%u"
           )

          ("it"
           "T-shirt idea"
           entry
           (file+headline "~/Dropbox/notes/ideas.org" "T-shirt slogans")
           "* %^{T-shirt slogan (title)}\n %? \n%u"
           )
          
          ("j" 
           "Journal" 
           entry (file+datetree "")             
           "* %?\nEntered on %U\n  %i\n  %a"))) 
  
  (setq org-capture-templates-contexts
        '(("b" ((in-mode . "org-mode")))))
  
#+END_SRC

** Project configuration

Publishing is configured almost entirely through setting the value of one variable, called `org-publish-project-alist

#+BEGIN_SRC emacs-lisp
  
  (setq org-publish-project-alist
        '(
          ("org-perfumed-nightmare"
           :base-directory "~/Dropbox/notes/blog"
           :publishing-directory "~/Documents/danielsz.github.io/_posts"
           :publishing-function org-publish-org-to-html
           :preparation-function (lambda () (mapcar 'pn-expand-blog-file (pn-select-blog-files)))
           :completion-function pn-delete-blog-files
           :table-of-contents nil
           :html-extension "html"
           :body-only t 
           :exclude "\\^\\([0-9]\\{4\\}-[0-9]+-[0-9]+\\)"
           ))
        )
  
#+END_SRC

These are my helper functions for the above project. One-click exporting to jekyll.

#+begin_src emacs-lisp
      
  (defun pn-get-property (prop)
    (plist-get (cdr (assoc "org-perfumed-nightmare" org-publish-project-alist)) prop))
  
  (defun pn-select-blog-files ()
    (directory-files (pn-get-property :base-directory) t "\\([0-9]\\{4\\}-[0-9]+-[0-9]+\\)"))
  
  (defun pn-delete-blog-files ()
    (mapcar (lambda (file)
              (kill-buffer (find-buffer-visiting file))
              (delete-file file)) (pn-select-blog-files))
    ) 
  (defun chomp (str)
    "Chomp leading and trailing whitespace from STR."
    (while (string-match "\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\'"
                         str)
      (setq str (replace-match "" t t str)))
    str)
      
  (defun pn-delete-line ()
    (delete-region (point) (progn (forward-line -1) (point))))
  
  (defun pn-expand-blog-file (file)
    (with-current-buffer (find-file-noselect file)
      (end-of-buffer)
      (beginning-of-line)
      (let ((root-file (chomp (thing-at-point 'line))))
        (pn-delete-line)
        (insert-file-contents root-file)
        (delete-region (point) (line-end-position)))))
  
#+end_src

Interactive function to enable the 1-click custom export command in Emacs:

#+BEGIN_SRC emacs-lisp
(require 'org-publish)

  (defun org-export-blog ()
    "1-click blog publishing"
    (interactive)
    (org-capture nil "b")
    (org-publish "org-perfumed-nightmare"))
  
#+END_SRC

** Org-babel

org-babel setup
#+BEGIN_SRC emacs-lisp

(when (locate-file "ob" load-path load-suffixes)
					   (require 'ob)
					   (require 'ob-tangle)
					   (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

					   (org-babel-do-load-languages
					    'org-babel-load-languages
					    '((emacs-lisp . t)
					      (clojure . t)
					      (js . t)
					      (ruby . t)))


					   (defun org-babel-execute:clojure (body params)
					     "Evaluate a block of Clojure code with Babel."
					     (let* ((result (nrepl-send-string-sync body (nrepl-current-ns)))
						    (value (plist-get result :value))
						    (out (plist-get result :stdout))
						    (out (when out
							   (if (string= "\n" (substring out -1))
							       (substring out 0 -1)
							     out)))
						    (stdout (when out
							      (mapconcat (lambda (line)
									   (concat ";; " line))
									 (split-string out "\n")
									 "\n"))))
					       (concat stdout
						       (when (and stdout (not (string= "\n" (substring stdout -1))))
							 "\n")
						       ";;=> " value)))

					   (provide 'ob-clojure)

					   (setq org-src-fontify-natively t)
					   (setq org-confirm-babel-evaluate nil))

#+END_SRC

* Ctags
Find root (replace eproject-root): cd "$(git rev-parse --show-toplevel)"

#+BEGIN_SRC emacs-lisp
(defun build-ctags ()
  (interactive)
  (message "building project tags")
  (let ((root (eproject-root)))
    (shell-command (concat "ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git --exclude=public -f " root "TAGS " root)))
  (visit-project-tags)
  (message "tags built successfully"))

(defun visit-project-tags ()
  (interactive)
  (let ((tags-file (concat (eproject-root) "TAGS")))
    (visit-tags-table tags-file)
    (message (concat "Loaded " tags-file))))
#+END_SRC
* Repos
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("tromey" . "http://tromey.com/elpa/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC
* Paredit
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
#+END_SRC
* Slime
If there is a slime helper in quicklisp directory, assume a clozure installation
#+BEGIN_SRC emacs-lisp
  (let 
       ((slime-helper (expand-file-name "~/quicklisp/slime-helper.el")))
    (when (file-exists-p slime-helper)
      (load slime-helper)
      (setq inferior-lisp-program "ccl")))
#+END_SRC
* w3m
#+BEGIN_SRC emacs-lisp
(setq w3m-coding-system 'utf-8
          w3m-file-coding-system 'utf-8
          w3m-file-name-coding-system 'utf-8
          w3m-input-coding-system 'utf-8
          w3m-output-coding-system 'utf-8
          w3m-terminal-coding-system 'utf-8)
#+END_SRC
* mu4e
#+BEGIN_SRC emacs-lisp
    (when (require 'mu4e nil t)
      (setq 
       mu4e-maildir (expand-file-name "~/mail")
       mu4e-mu-binary "/usr/local/bin/mu"
       ;; below are the defaults; if they do not exist yet, mu4e offers to
       ;; create them. they can also functions; see their docstrings.
       ;; (setq mu4e-sent-folder   "/sent")
       ;; (setq mu4e-drafts-folder "/drafts")
       ;; (setq mu4e-trash-folder  "/trash")
       ;;mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
       mu4e-get-mail-command "true"
       mu4e-update-interval 300)             ;; update every 5 minutes
    )
    
    
    
    ;; smtp mail setting; these are the same that `gnus' uses.
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials
          '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials
          (expand-file-name "~/.authinfo")
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          smtpmail-debug-info t) 
#+END_SRC

* Mac OS X customizations

Clipboard and kill ring

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (progn
      (turn-on-pbcopy)))  
#+END_SRC
* ElDOC
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
* Global keys
#+BEGIN_SRC emacs-lisp
;;ace-jump-mode
(eval-after-load "org"
        '(define-key org-mode-map "\C-c " 'nil)) ; unmap key, was org-table-blank-field
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
;;org-capture
(global-set-key [f6] 'org-capture)
;;deft
(global-set-key [f8] 'deft)
;;org-velocity
(global-set-key (kbd "C-c v") 'org-velocity-read)
;;magit
(global-set-key (kbd "C-x C-o") 'magit-status)
;;;Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface to your recently and most frequently used commands.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
;;Get rid of `find-file-read-only' and replace it with something more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
;;helm mini
(global-set-key (kbd "C-c h") 'helm-mini)
;;magit-status
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
